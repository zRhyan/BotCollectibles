from aiogram import Router, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from sqlalchemy.future import select
from database.models import User
from database.session import get_session
import logging
import time

# Configure logger
logger = logging.getLogger(__name__)

router = Router()

# Dicion√°rio para rastrear transa√ß√µes pendentes
active_coin_donations = {}

# Tempo m√°ximo (em segundos) que uma transa√ß√£o pode ficar pendente
TRANSACTION_TIMEOUT = 180  # 3 minutos

@router.message(Command("doarcoins"))
async def doarcoins_command(message: types.Message):
    """
    Handles the /doarcoins command for donating Pokecoins.
    Expected format: /doarcoins <quantity|*> <nickname>
    """
    user_id = message.from_user.id
    current_time = time.time()
    
    # Limpar doa√ß√µes antigas antes de verificar
    cleanup_pending_transactions()
    
    # Verificar se o usu√°rio j√° est√° em processo de doa√ß√£o
    if user_id in active_coin_donations:
        await message.reply(
            "‚ö†Ô∏è **Voc√™ j√° tem um processo de doa√ß√£o em andamento!**\n"
            "Complete sua doa√ß√£o atual ou aguarde alguns minutos antes de tentar novamente.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
        
    # Registrar a transa√ß√£o pendente
    active_coin_donations[user_id] = current_time
    
    try:
        text_parts = message.text.split(maxsplit=1)
        if len(text_parts) < 2:
            if user_id in active_coin_donations:
                del active_coin_donations[user_id]
            await message.reply(
                "‚ùó **Erro:** Especifique a quantidade de Pokecoins e o nickname do destinat√°rio.\n"
                "Exemplos:\n"
                "‚Ä¢ `/doarcoins 100 nickname`\n"
                "‚Ä¢ `/doarcoins * nickname`",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        args = text_parts[1].strip()
        parts = args.split()
        if len(parts) < 2:
            if user_id in active_coin_donations:
                del active_coin_donations[user_id]
            await message.reply(
                "‚ùó **Erro:** Especifique a quantidade de Pokecoins e o nickname do destinat√°rio.\n"
                "Exemplos:\n"
                "‚Ä¢ `/doarcoins 100 nickname`\n"
                "‚Ä¢ `/doarcoins * nickname`",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        quantity = parts[0]
        nickname = parts[1]

        # Fetch donor and recipient in separate sessions to avoid transaction issues
        donor = None
        recipient = None
        
        # Get donor
        try:
            async with get_session() as session:
                result = await session.execute(select(User).where(User.id == user_id))
                donor = result.scalar_one_or_none()
                
            if not donor:
                if user_id in active_coin_donations:
                    del active_coin_donations[user_id]
                await message.reply(
                    "‚ùå **Erro:** Voc√™ ainda n√£o est√° registrado no sistema. Use o comando `/jornada` para come√ßar sua aventura.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
        except Exception as e:
            logger.error(f"Erro ao obter dados do doador: {str(e)}")
            if user_id in active_coin_donations:
                del active_coin_donations[user_id]
            await message.reply(
                "‚ùå **Erro ao verificar seu registro.** Por favor, tente novamente mais tarde.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
            
        # Get recipient
        try:
            async with get_session() as session:
                result = await session.execute(select(User).where(User.nickname == nickname))
                recipient = result.scalar_one_or_none()
                
            if not recipient:
                if user_id in active_coin_donations:
                    del active_coin_donations[user_id]
                await message.reply(
                    f"‚ùå **Erro:** Nenhum usu√°rio encontrado com o nickname `{nickname}`.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
        except Exception as e:
            logger.error(f"Erro ao obter dados do destinat√°rio: {str(e)}")
            if user_id in active_coin_donations:
                del active_coin_donations[user_id]
            await message.reply(
                "‚ùå **Erro ao verificar o destinat√°rio.** Por favor, tente novamente mais tarde.",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        # Determine donation quantity
        if quantity == "*":
            donation_quantity = donor.coins
        else:
            try:
                donation_quantity = int(quantity)
            except ValueError:
                if user_id in active_coin_donations:
                    del active_coin_donations[user_id]
                await message.reply(
                    "‚ùó **Erro:** A quantidade deve ser um n√∫mero inteiro v√°lido ou `*` para doar tudo.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return

        if donation_quantity <= 0 or donor.coins < donation_quantity:
            if user_id in active_coin_donations:
                del active_coin_donations[user_id]
            await message.reply(
                f"‚ùå **Erro:** Voc√™ n√£o tem Pokecoins suficientes para doar.\n"
                f"üí∞ **Suas Pokecoins:** {donor.coins}",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        # Confirmation step
        await message.reply(
            f"‚ö†Ô∏è **Confirma√ß√£o:** Voc√™ est√° prestes a doar `{donation_quantity}` Pokecoins para `{nickname}`.\n"
            "Clique em **Confirmar** para continuar ou ignore esta mensagem para cancelar.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚úÖ Confirmar", callback_data=f"confirm_coin_{donation_quantity}_{nickname}")],
                    [types.InlineKeyboardButton(text="‚ùå Cancelar", callback_data="cancel_coin_donation")]
                ]
            )
        )
    except Exception as e:
        logger.error(f"Erro inesperado em doarcoins: {str(e)}", exc_info=True)
        if user_id in active_coin_donations:
            del active_coin_donations[user_id]
        await message.reply(
            "‚ùå **Erro:** Ocorreu um problema ao processar seu comando.",
            parse_mode=ParseMode.MARKDOWN
        )

@router.callback_query(lambda call: call.data.startswith("confirm_coin_"))
async def confirm_coin_donation(callback: types.CallbackQuery):
    """
    Processes confirmation for a Pokecoin donation.
    """
    user_id = callback.from_user.id
    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            await callback.answer("Dados inv√°lidos.", show_alert=True)
            return
            
        try:
            donation_quantity = int(parts[2])
        except ValueError:
            await callback.answer("Quantidade inv√°lida.", show_alert=True)
            return
            
        nickname = parts[3]

        try:
            async with get_session() as session:
                async with session.begin():
                    # Fetch donor and recipient com uma √∫nica opera√ß√£o para evitar condi√ß√µes de corrida
                    donor_result = await session.execute(select(User).where(User.id == user_id))
                    donor = donor_result.scalar_one_or_none()
                    recipient_result = await session.execute(select(User).where(User.nickname == nickname))
                    recipient = recipient_result.scalar_one_or_none()

                    # Valida√ß√µes completas antes de qualquer modifica√ß√£o
                    if not donor or not recipient:
                        await callback.answer("Usu√°rio n√£o encontrado.", show_alert=True)
                        return

                    if donor.coins < donation_quantity:
                        await callback.answer("Voc√™ n√£o tem pokecoins suficientes.", show_alert=True)
                        return

                    # Transfer√™ncia at√¥mica das pokecoins
                    donor.coins -= donation_quantity
                    recipient.coins += donation_quantity

            # Remover a transa√ß√£o pendente ap√≥s o sucesso
            if user_id in active_coin_donations:
                del active_coin_donations[user_id]

            # Feedback para o usu√°rio ap√≥s opera√ß√£o bem-sucedida
            await callback.message.edit_text(
                f"‚úÖ Doa√ß√£o conclu√≠da! Voc√™ doou {donation_quantity} pokecoins para {nickname}.",
                parse_mode=ParseMode.MARKDOWN
            )
            await callback.answer("Doa√ß√£o realizada com sucesso!", show_alert=True)
            
        except Exception as e:
            logger.error(f"Erro ao processar doa√ß√£o: {str(e)}")
            
            # Remover a transa√ß√£o pendente em caso de erro
            if user_id in active_coin_donations:
                del active_coin_donations[user_id]
                
            # Tratamento de erro durante a transfer√™ncia
            await callback.message.edit_text(
                "‚ùå **Erro:** Ocorreu um problema durante a doa√ß√£o. Tente novamente mais tarde.",
                parse_mode=ParseMode.MARKDOWN
            )
            await callback.answer("Erro durante a doa√ß√£o.", show_alert=True)
    except Exception as e:
        logger.error(f"Erro global em confirm_coin_donation: {str(e)}", exc_info=True)
        
        # Remover a transa√ß√£o pendente em caso de erro global
        if user_id in active_coin_donations:
            del active_coin_donations[user_id]
            
        await callback.answer("Erro ao processar a doa√ß√£o.", show_alert=True)

@router.callback_query(lambda call: call.data == "cancel_coin_donation")
async def cancel_coin_donation(callback: types.CallbackQuery):
    """
    Cancels any pending donation action.
    """
    user_id = callback.from_user.id
    
    # Remover a transa√ß√£o pendente
    if user_id in active_coin_donations:
        del active_coin_donations[user_id]
        
    await callback.message.edit_text("‚ùå Doa√ß√£o cancelada.", parse_mode=ParseMode.MARKDOWN)
    await callback.answer("Doa√ß√£o cancelada.", show_alert=True)

def cleanup_pending_transactions():
    """Remove transa√ß√µes pendentes antigas do dicion√°rio"""
    current_time = time.time()
    cleaned = 0
    for uid in list(active_coin_donations.keys()):
        if current_time - active_coin_donations[uid] > TRANSACTION_TIMEOUT:
            del active_coin_donations[uid]
            cleaned += 1
    
    if cleaned > 0:
        logger.info(f"Limpeza de doa√ß√µes de moedas: {cleaned} transa√ß√µes expiradas removidas")